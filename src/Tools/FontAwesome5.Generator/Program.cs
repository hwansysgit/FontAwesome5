using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FontAwesome6.Generator
{
    class Program
    {
        static StringBuilder _content = new StringBuilder();
        static Stack<string> _indent = new Stack<string>();

        static void Main(string[] args)
        {
            Generate(args[0]);
        }

        static void Generate(string inputDirectory)
        {
            var outputFile = Path.Combine(inputDirectory, @"src\FontAwesome6\EFontAwesomeIcon.cs");
            var configFile = Path.Combine(inputDirectory, @"Font-Awesome6\metadata\icons.json");

            var fa = new FontAwesomeManager(configFile);

            WriteLine("//------------------------------------------------------------------------------");
            WriteLine("// <auto-generated>");
            WriteLine("//     This code was generated by a tool");
            WriteLine("//");
            WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            WriteLine("//     the code is regenerated.");
            WriteLine("// </auto-generated>");
            WriteLine("//------------------------------------------------------------------------------");

            WriteLine("using System;");
            WriteLine("using System.ComponentModel;");
            WriteLine("namespace FontAwesome6");
            WriteLine("{");
            PushIndent("\t");

            WriteLine("/// <summary>");
            WriteLine("/// FontAwesome by Dave Gandy (@davegandy)");
            WriteLine("///	The iconic SVG, font, and CSS toolkit");
            WriteLine("///	License https://fontawesome.com/license (C#: MIT License)");
            WriteLine("/// </summary>");
            WriteLine("public enum EFontAwesomeStyle");
            WriteLine("{");
            PushIndent("\t");
            WriteSummary("This Style is used as an undefined state.");
            WriteLine("None,");
            WriteLine("");
            foreach (EStyles style in Enum.GetValues(typeof(EStyles)))
            {
                WriteSummary("FontAwesome6 {0} Style", style);
                WriteLine("{0},", style);
                WriteLine("");
            }
            PopIndent();
            WriteLine("}");

            WriteLine("");
            WriteLine("///<summary>FontAwesome6 Icons</summary>");
            WriteLine("public enum EFontAwesomeIcon");
            WriteLine("{");
            PushIndent("\t");
            WriteSummary("Set this value to show no icon.");
            WriteLine("None = 0x0,");
            WriteLine("");

            foreach (EStyles style in Enum.GetValues(typeof(EStyles)))
            {
                foreach (var kvp in fa.Icons.Where(i => i.Value.styles.Contains(style.ToString().ToLower())))
                {
                    WriteSummary(kvp.Value.label);
                    WriteLine("///<see href=\"https://fontawesome.com/v6.0/icons/{0}?s={1}\" />", kvp.Key, style.ToString().ToLower());   
                    WriteLine("{0}_{1},", style, fa.Convert(kvp.Key));
                    WriteLine("");
                }
            }

            PopIndent();
            WriteLine("}");

            PopIndent();
            WriteLine("}");

            File.WriteAllText(outputFile, _content.ToString());

            _content = new StringBuilder();

            WriteLine("//------------------------------------------------------------------------------");
            WriteLine("// <auto-generated>");
            WriteLine("//     This code was generated by a tool");
            WriteLine("//");
            WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            WriteLine("//     the code is regenerated.");
            WriteLine("// </auto-generated>");
            WriteLine("//------------------------------------------------------------------------------");

            WriteLine("using System;");
            WriteLine("using System.Collections.Generic;");
            WriteLine("namespace FontAwesome6");
            WriteLine("{");
            PushIndent("\t");

            WriteLine("internal static class FontAwesomeInternal");
            WriteLine("{");
            PushIndent("\t");
            WriteLine("public static Dictionary<EFontAwesomeIcon, FontAwesomeInformation> Information = new Dictionary<EFontAwesomeIcon, FontAwesomeInformation>() {");
            PushIndent("\t");

            foreach (EStyles style in Enum.GetValues(typeof(EStyles)))
            {
                foreach (var kvp in fa.Icons.Where(i => i.Value.styles.Contains(style.ToString().ToLower())))
                {
                   
                    if (kvp.Value.svg.TryGetValue(style.ToString().ToLower(), out var svgInfo))
                    {
                        string path = null;

                        if (svgInfo.path is string)
                            path = svgInfo.path.ToString();
                        else
                        {
                            path = (svgInfo.path as JArray)[0].ToString();
                        }

                        if(kvp.Value.label.ToLower() == "ditto" || kvp.Value.label.ToLower() == "slash back")
                            WriteLine("{{EFontAwesomeIcon.{0}_{1}, new FontAwesomeInformation(\"{2}\", EFontAwesomeStyle.{0}, \"\\{3}\", new FontAwesomeSvgInformation(\"{4}\", {5}, {6}))}},",
                        style, fa.Convert(kvp.Key), kvp.Value.label, char.ConvertFromUtf32(Convert.ToInt32("0x" + kvp.Value.unicode, 16)), path, svgInfo.width, svgInfo.height);
                        else
                            WriteLine("{{EFontAwesomeIcon.{0}_{1}, new FontAwesomeInformation(\"{2}\", EFontAwesomeStyle.{0}, \"{3}\", new FontAwesomeSvgInformation(\"{4}\", {5}, {6}))}},",
                        style, fa.Convert(kvp.Key), kvp.Value.label, char.ConvertFromUtf32(Convert.ToInt32("0x" + kvp.Value.unicode, 16)), path, svgInfo.width, svgInfo.height);
                    }
                    else
                    {
                        WriteLine("{{EFontAwesomeIcon.{0}_{1}, new FontAwesomeInformation(\"{2}\", EFontAwesomeStyle.{0}, \"{3}\")}},", 
                                  style, fa.Convert(kvp.Key), kvp.Value.label, char.ConvertFromUtf32(Convert.ToInt32("0x" + kvp.Value.unicode, 16)));

                    }
                }
            }

            PopIndent();
            WriteLine("};");

            PopIndent();
            WriteLine("};");

            WriteLine("");
            WriteLine("public class FontAwesomeInformation");
            WriteLine("{");
            PushIndent("\t");
            WriteSummary("FontAwesome Label");
            WriteLine("public string Label { get; set; }");
            WriteSummary("FontAwesome Style");
            WriteLine("public EFontAwesomeStyle Style { get; set; }");
            WriteSummary("FontAwesome Unicode");
            WriteLine("public string Unicode { get; set; }");
            WriteSummary("FontAwesome Svg");
            WriteLine("public FontAwesomeSvgInformation Svg { get; set; }");
            WriteLine("");
            WriteLine("public FontAwesomeInformation(string label, EFontAwesomeStyle style, string unicode, FontAwesomeSvgInformation svg = null)");
            WriteLine("{");
            WriteLine("    Label = label;");
            WriteLine("    Style = style;");
            WriteLine("    Unicode = unicode;");
            WriteLine("    Svg = svg;");
            WriteLine("}");
            PopIndent();
            WriteLine("}");
            WriteLine("");
            WriteLine("public class FontAwesomeSvgInformation");
            WriteLine("{");
            PushIndent("\t");
            WriteLine("public string Path { get; set; }");
            WriteLine("public int Width { get; set; }");
            WriteLine("public int Height { get; set; }");
            WriteLine("");
            WriteLine("public FontAwesomeSvgInformation(string path, int width, int height)");
            WriteLine("{");
            WriteLine("    Path = path;");
            WriteLine("    Width = width;");
            WriteLine("    Height = height;");
            WriteLine("}");
            PopIndent();
            WriteLine("}");

            PopIndent();
            WriteLine("}");

            outputFile = Path.Combine(inputDirectory, @"src\FontAwesome6\FontAwesomeInternal.cs");
            File.WriteAllText(outputFile, _content.ToString());
        }

        static void WriteSummary(string text)
        {
            WriteLine("/// <summary>");
            WriteLine("/// {0}", text);
            WriteLine("/// </summary>");
        }

        static void WriteSummary(string format, params object[] parameter)
        {
            WriteLine("/// <summary>");
            WriteLine("/// " + format, parameter);
            WriteLine("/// </summary>");
        }

        static void WriteLine(string text)
        {
            _content.AppendLine(GetIndent() + text);
        }

        static void WriteLine(string text, params object[] parameter)
        {
            _content.AppendLine(GetIndent() + string.Format(text, parameter));
        }

        static void PushIndent(string indent)
        {
            _indent.Push(indent);
        }

        static void PopIndent()
        {
            _indent.Pop();
        }

        static string GetIndent()
        {
            var indent = "";
            foreach (var entry in _indent)
            {
                indent += entry;
            }

            return indent;
        }

    }
}
